{"version":3,"sources":["api/firebase.ts","api/chat.ts","api/auth.ts","components/AddNameScreen.tsx","components/Chat/WriteArea.tsx","components/Chat/ReadArea.tsx","components/HowItWorksButton.tsx","components/Chat/Sidebar.tsx","components/Workspace/CanvasNode.tsx","components/Workspace/Canvas.tsx","components/HomePage.tsx","App.tsx","index.tsx"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","db","database","writeChats","message","content","timestamp","uid","anonymousUsername","ref","push","authenticateAnonymously","a","currentUser","signInAnonymously","console","error","deleteUnauthenticatedUser","delete","AddNameScreen","setAnonymousUsername","useState","username","setUsername","showScreen","setLockScreen","className","onSubmit","type","name","placeholder","onChange","event","target","value","disabled","WriteArea","chatArea","user","setContent","writeError","setWriteError","handleAfterWriteMessage","getChatArea","heightToScroll","scrollHeight","scrollBy","handleWriteError","useEffect","Date","now","ChatAPI","current","handleSubmit","preventDefault","ReadArea","chat","date","getOwnId","style","borderColor","dateTime","toDateString","time","toLocaleDateString","hour","getHours","minute","getMinutes","formatTime","HowItWorksDialog","useRef","onClick","showModal","method","ChatSidebar","props","chats","chatRef","HowItWorksButton","AuthAPI","map","CanvasNode","id","data","messageVisible","setMessageVisible","nodeRef","root","parentNode","as","data-tile","trackVisibility","delay","isCurrentNode","lastMessage","WorkspaceCanvas","nodeList","setNodeList","initialSchema","createSchema","nodes","links","useSchema","schema","addNode","userCb","unauthUsersNodeList","currentUsers","on","snapshot","val","unauthenticatedUsers","Object","values","node","getUserLastMessage","userId","userMessages","filter","length","uniqBy","render","disableDrag","newSchema","randomNumber","min","max","r","Math","random","floor","HomePage","setChats","chatHistoryCb","chatHistory","chatHistorySorted","sort","b","coordinates","inputs","alignment","outputs","handleUnload","window","addEventListener","removeEventListener","addNameProps","workspaceProps","chatProps","App","authenticated","setAuthenticated","onAuthStateChanged","to","href","rel","path","role","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.627492bc.chunk.js","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/auth'\nimport 'firebase/database'\n\nconst config = {\n  apiKey: 'AIzaSyAzb00TjeYTc6k8YSRYPbQ4RVz-g8SVOro',\n  authDomain: 'tribe-cezar.firebaseapp.com',\n  projectId: 'tribe-cezar',\n  storageBucket: 'tribe-cezar.appspot.com',\n  messagingSenderId: '11813997156',\n  appId: '1:11813997156:web:68ce9a8db7f40f67ab6d71',\n  measurementId: 'G-341K7GCW4R'\n}\n\nfirebase.initializeApp(config)\n\nexport const auth = firebase.auth\nexport const db = firebase.database()\n","\nimport {db} from './firebase'\nimport type {IChat} from '../types'\n\ninterface IReadChats {\n  (chatHistory: IChat[]): void\n}\n\nexport function readChats (chatHistoryCb: IReadChats) {\n  db.ref('chats').on('value', snapshot => {\n    if (!snapshot || !snapshot.val()) return\n\n    const chatHistory: IChat[] = []\n    const currentChatHistory: IChat[] = Object.values(snapshot.val())\n\n    for (const chat of currentChatHistory) {\n      chatHistory.push(chat)\n    }\n\n    const chatHistorySorted = chatHistory\n      .sort((a, b) => a.timestamp - b.timestamp)\n\n    chatHistoryCb(chatHistorySorted)\n  })\n}\n\nexport function writeChats (message: IChat) {\n  const {content, timestamp, uid, anonymousUsername} = message\n\n  db.ref('chats').push({content, timestamp, uid, anonymousUsername})\n}\n","import {auth, db} from './firebase'\n\nexport const authenticateAnonymously = async (): Promise<void> => {\n  if (!auth().currentUser) {\n    try {\n      await auth().signInAnonymously()\n    } catch (error) {\n      console.error({error})\n    }\n  }\n}\n\nexport interface IReadUsers {\n  (unauthenticatedUsers: string[]): void\n}\n\nexport function readUnauthenticatedUsers (userCb: IReadUsers) {\n  db.ref('unauthenticatedUsers').on('value', snapshot => {\n    if (!snapshot || !snapshot.val()) return\n\n    const unauthenticatedUsers: string[] = []\n    const currentUsers: string[] = Object.values(snapshot.val())\n\n    for (const user of currentUsers) {\n      unauthenticatedUsers.push(user)\n    }\n\n    userCb(unauthenticatedUsers)\n  })\n}\n\nexport function deleteUnauthenticatedUser () {\n  auth().currentUser?.delete()\n}\n\ninterface IUnauthenticatedUserNode {\n  username: string\n  uid: string\n  coordinates: number[]\n}\n\nexport function setUnauthenticatedUserNode (\n  {username, uid, coordinates}: IUnauthenticatedUserNode\n) {\n  db.ref('unauthenticatedUsers')\n    .push({\n      id: `${uid}-${username}`,\n      content: username,\n      coordinates,\n      inputs: [{id: `${username}-input`, alignment: 'left'}],\n      outputs: [{id: `${username}-output`, alignment: 'right'}]\n    })\n}\n","import React, {useState} from 'react'\nimport type {User} from '@firebase/auth-types'\n\ninterface IAddNameScreen {\n  user: User\n  setAnonymousUsername: (username: string) => void\n}\n\nfunction AddNameScreen ({setAnonymousUsername}: IAddNameScreen) {\n  const [username, setUsername] = useState('')\n  const [showScreen, setLockScreen] = useState(true)\n\n  const handleSubmit = () => {\n    setAnonymousUsername(username)\n\n    setLockScreen(false)\n  }\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setUsername(event.target.value)\n  }\n\n  if (!showScreen) return null\n\n  return (\n    <form className='first-screen nes-field' onSubmit={handleSubmit}>\n      <h1 className='section-title'>\n        Hello!<br />Welcome to the chat app\n      </h1>\n      <input\n        type='text'\n        name='namefield'\n        placeholder='Your name'\n        className='nes-input'\n        onChange={handleChange}\n        value={username}\n      />\n      <input\n        type='submit'\n        className='nes-btn is-primary'\n        disabled={username === ''}\n        value='Go chat!'\n      />\n    </form>\n  )\n}\n\nexport default AddNameScreen\n","import React, {useEffect, useState} from 'react'\n\nimport {auth} from '../../api/firebase'\nimport type {IChat, TError} from '../../types'\nimport * as ChatAPI from '../../api/chat'\n\ninterface IWriteArea {\n  anonymousUsername: string\n  chatArea: React.MutableRefObject<HTMLDivElement | null>\n}\n\nfunction WriteArea ({anonymousUsername, chatArea}: IWriteArea) {\n  const currentUser = auth().currentUser\n  const [user] = useState(currentUser)\n  const [content, setContent] = useState('')\n  const [writeError, setWriteError] = useState(null as TError)\n\n  const handleAfterWriteMessage = (getChatArea: HTMLDivElement | null) => {\n    if (!getChatArea) return\n\n    setContent('')\n    const heightToScroll = getChatArea.scrollHeight\n\n    getChatArea?.scrollBy(0, heightToScroll)\n  }\n\n  const handleWriteError = (error: {message: TError}) => {\n    const message = error?.message\n\n    if (message) setWriteError(message)\n  }\n\n  const handleChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setContent(event.target.value)\n  }\n\n  // Update service that will trigger a new message\n  // each time a new chat member joins.\n  useEffect(() => {\n    const message: IChat = {\n      anonymousUsername: anonymousUsername,\n      content: `${anonymousUsername} just joined.`,\n      timestamp: Date.now(),\n      uid: `${user?.uid}-${anonymousUsername}` || ''\n    }\n\n    try {\n      ChatAPI.writeChats(message)\n      handleAfterWriteMessage(chatArea?.current)\n    } catch (error) {\n      handleWriteError(error)\n    }\n  }, [chatArea, user?.uid, anonymousUsername])\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault()\n    setWriteError(null)\n\n    const message: IChat = {\n      anonymousUsername: anonymousUsername,\n      content,\n      timestamp: Date.now(),\n      uid: `${user?.uid}-${anonymousUsername}` || ''\n    }\n\n    try {\n      ChatAPI.writeChats(message)\n      handleAfterWriteMessage(chatArea?.current)\n    } catch (error) {\n      handleWriteError(error)\n    }\n  }\n\n  return (\n    <form className='twoCol' onSubmit={handleSubmit}>\n      {writeError ? <p className='is-error'>{writeError}</p> : null}\n      <textarea\n        placeholder='What are you thinking?'\n        className='nes-textarea'\n        onChange={handleChange}\n        value={content}\n      />\n      <input className='nes-btn is-primary' type='submit' value='Send!' />\n    </form>\n  )\n}\n\nexport default WriteArea\n","import React from 'react'\nimport type {User} from '@firebase/auth-types'\n\nimport type {IChat} from '../../types'\n\ninterface IReadArea {\n  user: User | null\n  chat: IChat\n}\n\nfunction ReadArea ({user, chat}: IReadArea) {\n  const date = new Date(chat.timestamp)\n\n  const formatTime = () => {\n    const time = {\n      date: date.toLocaleDateString(),\n      hour: date.getHours(),\n      minute: date.getMinutes()\n    }\n\n    return `${time.hour}:${time.minute}`\n  }\n\n  const getOwnId = `${user?.uid}-${chat.anonymousUsername}`\n\n  return (\n    <article\n      key={chat.timestamp}\n      className='nes-container with-title'\n      style={{\n        borderColor: getOwnId === chat.uid ? '#f7d51d' : 'inherit'\n      }}\n    >\n      <header className='title'>\n        {chat.anonymousUsername}\n        <time dateTime={date.toDateString()}>\n          ({formatTime()})\n        </time>\n      </header>\n    {chat.content}\n    </article>\n  )\n}\n\nexport default ReadArea\n","import React, {useRef} from 'react'\n\nfunction HowItWorksDialog () {\n  const ref: React.MutableRefObject<HTMLDialogElement | null> = useRef(null)\n\n  const handleOnClick = () => {\n    ref.current?.showModal()\n  }\n\n  return (\n    <>\n      <button\n        type='button'\n        className='nes-btn is-primary'\n        onClick={handleOnClick}\n      >\n        How it works?\n      </button>\n      <dialog className='nes-dialog' ref={ref}>\n        <form method='dialog'>\n          <h3 className='section-title'>How it works?</h3>\n          <div className='lists'>\n            <ul className='nes-list is-disc'>\n              <li>\n                {'When a user opens the web app, they should ' +\n                'enter their name and then join.'}\n              </li>\n              <li>\n                {'When a user joins, they are going to be ' +\n                'visible to other users.'}\n              </li>\n              <li><pre />\n                {'When a user is close enough to other users/they ' +\n                'can write messages that will be visible to them based ' +\n                'on their distance, so the closer, the more relevant the ' +\n                'messages will be.'}\n              </li>\n            </ul>\n          </div>\n          <menu className='dialog-menu'>\n            <button className='nes-btn is-primary'>Gotcha!</button>\n          </menu>\n        </form>\n      </dialog>\n    </>\n  )\n}\n\nexport default HowItWorksDialog\n","import React, {useRef} from 'react'\nimport type {User} from '@firebase/auth-types'\n\nimport type {IChat} from '../../types'\nimport WriteArea from './WriteArea'\nimport ReadArea from './ReadArea'\nimport * as AuthAPI from '../../api/auth'\nimport HowItWorksButton from '../HowItWorksButton'\n\ninterface IChatSidebar {\n  user: User | null\n  chats: IChat[]\n  anonymousUsername: string\n}\n\nfunction ChatSidebar (props: IChatSidebar) {\n  const {user, chats, anonymousUsername} = props\n  const chatRef: React.MutableRefObject<HTMLDivElement | null> = useRef(null)\n\n  const handleLogout = () => {\n    AuthAPI.deleteUnauthenticatedUser()\n  }\n\n  return (\n    <section className='sidebar'>\n      <section className='nes-container'>\n        <p><b>Welcome,</b> {anonymousUsername}</p>\n        <div className='mid-center'>\n          <HowItWorksButton />\n          <button className='nes-btn is-error' onClick={handleLogout}>\n            Log me out!\n          </button>\n        </div>\n      </section>\n      <div className='mid-center'>\n        <h3 className='topic-title'>\n          Your workspace&nbsp;\n          <i className='nes-icon is-small heart' />\n          <i className='nes-icon is-small heart' />\n          <i className='nes-icon is-small heart' />\n          <i className='nes-icon is-small heart' />\n          <i className='nes-icon is-small heart' />\n        </h3>\n      </div>\n      <div\n        ref={chatRef}\n        className='chatList'\n      >\n        {chats.map((chat) => {\n          return (\n            <ReadArea\n              key={chat.timestamp}\n              user={user}\n              chat={chat}\n            />\n          )\n        })}\n      </div>\n      <WriteArea\n        chatArea={chatRef}\n        anonymousUsername={anonymousUsername}\n      />\n    </section>\n  )\n}\n\nexport default ChatSidebar\n","import React, {useRef, useState} from 'react'\nimport type {Node} from 'beautiful-react-diagrams/@types/DiagramSchema'\nimport {InView} from 'react-intersection-observer'\n\nimport type {IChat} from '../../types'\n\nexport default function CanvasNode (props: Pick<Node<IChat>, any>) {\n  const {id, content, data} = props\n  const [messageVisible, setMessageVisible] = useState(false)\n  const nodeRef: React.MutableRefObject<HTMLDivElement | null> = useRef(null)\n  const root = nodeRef.current?.parentNode?.parentNode\n\n  const onChange = () => {\n    setMessageVisible(!messageVisible)\n  }\n\n  return (\n    <InView\n      as='div'\n      data-tile\n      trackVisibility\n      delay={100}\n      root={root as HTMLElement}\n      onChange={onChange}>\n      <div\n        id={id}\n        ref={nodeRef}\n        className='message-list chat-user'\n      >\n        <section className='message -left'>\n          {\n          data.isCurrentNode || messageVisible\n            ? (\n              <div className='nes-balloon from-left'>\n                <p>{data.lastMessage}</p>\n              </div>\n              )\n            : null\n          }\n        </section>\n        <div className='user-info'>\n          <i className='nes-ash' />\n          <div className='nes-badge'>\n            <span\n              className={data.isCurrentNode ? 'is-warning' : 'is-success'}>\n              {data.isCurrentNode ? `${content} (you!)` : content}\n            </span>\n          </div>\n        </div>\n      </div>\n    </InView>\n  )\n}\n","import React, {useState, useEffect} from 'react'\nimport Diagram, {createSchema, useSchema} from 'beautiful-react-diagrams'\nimport type {Node, DiagramSchema} from 'beautiful-react-diagrams/@types/DiagramSchema'\nimport uniqBy from 'lodash/uniqBy'\n\nimport 'beautiful-react-diagrams/styles.css'\nimport * as AuthAPI from '../../api/auth'\nimport CanvasNode from './CanvasNode'\nimport type {IChat} from '../../types'\n\ninterface IWorkspaceCanvas {\n  id: string\n  chats: IChat[]\n}\n\nconst WorkspaceCanvas = ({id, chats}: IWorkspaceCanvas) => {\n  const [nodeList, setNodeList] = useState([] as Array<Node<unknown>>)\n  const initialSchema = createSchema({nodes: nodeList, links: []})\n\n  const [schema, {addNode, onChange}] = useSchema(initialSchema)\n\n  const handleOnChange = (newSchema: DiagramSchema<unknown>) => {\n    onChange(newSchema)\n    setNodeList(newSchema.nodes as [])\n  }\n\n  useEffect(() => {\n    const unauthUsersNodeList = AuthAPI\n      .readUnauthenticatedUsers((currentUsers: any[]) => {\n        setNodeList(currentUsers)\n      })\n\n    return () => unauthUsersNodeList\n  }, [])\n\n  useEffect(() => {\n    if (!nodeList) return\n\n    for (const node of nodeList) {\n      addNode(node)\n    }\n  }, [addNode, nodeList])\n\n  const getUserLastMessage = (userId: string) => {\n    const userMessages = chats.filter(user => user.uid === userId)\n\n    if (\n      userMessages.length >= 1 &&\n      userMessages[userMessages.length - 1]\n    ) {\n      return userMessages[userMessages.length - 1].content\n    }\n    return 'Hello!'\n  }\n\n  // Iterate over nodes so we can have them w/ custom styles\n  const getNodes = () => {\n    if (schema.nodes.length === 0) return null\n\n    return schema.nodes.map(node => ({\n      ...node,\n      render: CanvasNode,\n      data: {\n        lastMessage: getUserLastMessage(node.id),\n        isCurrentNode: node.id === id\n      },\n      // We can only drag the active user\n      disableDrag: node.id !== id\n    }))\n  }\n\n  return (\n    <Diagram\n      schema={{\n        links: [],\n        nodes: uniqBy(getNodes(), 'id') as any\n      }}\n      onChange={handleOnChange}\n    />\n  )\n}\n\nexport default WorkspaceCanvas\n","import React, {useState, useEffect} from 'react'\n\nimport {auth} from '../api/firebase'\nimport type {IChat} from '../types'\nimport * as ChatAPI from '../api/chat'\nimport * as AuthAPI from '../api/auth'\nimport AddNameScreen from './AddNameScreen'\nimport ChatSidebar from './Chat/Sidebar'\nimport WorkspaceCanvas from './Workspace/Canvas'\n\nfunction randomNumber (min: number, max: number) {\n  const r = Math.random() * (max - min) + min\n\n  return Math.floor(r)\n}\n\nfunction HomePage () {\n  const currentUser = auth().currentUser\n  const [user] = useState(currentUser)\n  const [anonymousUsername, setAnonymousUsername] = useState('')\n  const [chats, setChats] = useState<IChat[]>([])\n\n  useEffect(() => {\n    ChatAPI.readChats((chatHistory) => setChats(chatHistory))\n\n    // If user ID exist, delete previous node\n    // and start one from scratch. This prevents\n    // duplicated entries during local dev.\n    if (user && anonymousUsername) {\n      AuthAPI.setUnauthenticatedUserNode({\n        username: anonymousUsername,\n        uid: user?.uid,\n        coordinates: [randomNumber(150, 700), randomNumber(150, 700)]\n      })\n    }\n  }, [user, anonymousUsername])\n\n  const handleUnload = () => {\n    AuthAPI.deleteUnauthenticatedUser()\n  }\n\n  useEffect(() => {\n    window.addEventListener('beforeunload', handleUnload)\n\n    return () => {\n      window.removeEventListener('beforeunload', handleUnload)\n    }\n  }, [])\n\n  if (!user) return null\n\n  const id = `${user?.uid}-${anonymousUsername}`\n  const addNameProps = {user, setAnonymousUsername}\n  const workspaceProps = {id, chats}\n\n  const chatProps = {\n    user,\n    chats,\n    anonymousUsername\n  }\n\n  return anonymousUsername === ''\n    ? (\n      <AddNameScreen {...addNameProps} />\n      )\n    : (\n      <main>\n        <WorkspaceCanvas {...workspaceProps} />\n        <ChatSidebar {...chatProps} />\n      </main>\n      )\n}\n\nexport default HomePage\n","import React, {useState, useEffect} from 'react'\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Link\n} from 'react-router-dom'\n\nimport './App.css'\nimport {auth} from './api/firebase'\nimport HomePage from './components/HomePage'\nimport * as AuthAPI from './api/auth'\n\nfunction App () {\n  const [authenticated, setAuthenticated] = useState(false)\n\n  useEffect(() => {\n    auth().onAuthStateChanged((user) => {\n      if (user) {\n        setAuthenticated(true)\n\n        return\n      }\n\n      AuthAPI.authenticateAnonymously()\n      setAuthenticated(false)\n    })\n  }, [])\n\n  return (\n    // Do not load until anonymous\n    // authentication is finished.\n    !authenticated\n      ? (\n        <div className='loading' role='status'>\n          <progress\n            className='nes-progress is-pattern'\n            value='70'\n            max='100'\n          />\n          <h3 className='topic-title'>Loading chat...</h3>\n        </div>\n        )\n      : (\n        <Router>\n          <nav>\n            <Link to='/'>Home</Link>\n            <a\n              href='https://github.com/cezaraugusto'\n              rel='noreferrer noopener'\n              target='_blank'\n            >\n              <span className='nes-text is-success'>Ask developer!</span>\n            </a>\n          </nav>\n          <Switch>\n          <Route path='/'>\n            <HomePage />\n          </Route>\n          </Switch>\n        </Router>\n        )\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}